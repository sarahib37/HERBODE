"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const unist_util_find_1 = __importDefault(require("unist-util-find"));
const yaml_1 = require("yaml");
const revalidator_1 = __importDefault(require("revalidator"));
/**
 * Parses and validates Markdown frontmatter (YAML) to `file.data.frontmatter`.
 *
 * Validation is done by `revalidator`. See https://github.com/flatiron/revalidator.
 *
 * Built for Remark 12, won't work with Remark 13. Requires `remark-frontmatter`.
 */
const plugin = (schema) => (tree, file) => {
    const node = unist_util_find_1.default(tree, { type: "yaml" });
    if (!node) {
        file.message("No yaml node.");
        return;
    }
    if (typeof node.value !== "string")
        file.fail("Invalid yaml node.", node);
    let frontmatter;
    try {
        frontmatter = yaml_1.parse(node.value);
    }
    catch (err) {
        file.fail(err, node);
    }
    if (schema) {
        const result = revalidator_1.default.validate(frontmatter, schema);
        if (!result.valid) {
            const errs = JSON.stringify(result.errors, null, 2);
            file.fail(`Invalid frontmatter: ${errs}.`, node);
        }
    }
    const data = file.data;
    data.frontmatter = frontmatter;
};
module.exports = plugin;
